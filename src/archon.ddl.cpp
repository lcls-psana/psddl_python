/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/archon.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Archon {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Archon", 0, "The Python wrapper module for Archon types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Archon", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::Archon::ConfigV1, boost::shared_ptr<Psana::Archon::ConfigV1>, boost::noncopyable >("ConfigV1", "Class containing configuration data for CCDs using the Archon controller.", no_init)
    .def("readoutMode", &Psana::Archon::ConfigV1::readoutMode)
    .def("sweepCount", &Psana::Archon::ConfigV1::sweepCount)
    .def("integrationTime", &Psana::Archon::ConfigV1::integrationTime)
    .def("nonIntegrationTime", &Psana::Archon::ConfigV1::nonIntegrationTime)
    .def("preSkipPixels", &Psana::Archon::ConfigV1::preSkipPixels)
    .def("pixels", &Psana::Archon::ConfigV1::pixels)
    .def("postSkipPixels", &Psana::Archon::ConfigV1::postSkipPixels)
    .def("overscanPixels", &Psana::Archon::ConfigV1::overscanPixels)
    .def("preSkipLines", &Psana::Archon::ConfigV1::preSkipLines)
    .def("lines", &Psana::Archon::ConfigV1::lines)
    .def("postSkipLines", &Psana::Archon::ConfigV1::postSkipLines)
    .def("overScanLines", &Psana::Archon::ConfigV1::overScanLines)
    .def("horizontalBinning", &Psana::Archon::ConfigV1::horizontalBinning)
    .def("verticalBinning", &Psana::Archon::ConfigV1::verticalBinning)
    .def("rgh", &Psana::Archon::ConfigV1::rgh)
    .def("rgl", &Psana::Archon::ConfigV1::rgl)
    .def("shp", &Psana::Archon::ConfigV1::shp)
    .def("shd", &Psana::Archon::ConfigV1::shd)
    .def("st", &Psana::Archon::ConfigV1::st)
    .def("stm1", &Psana::Archon::ConfigV1::stm1)
    .def("at", &Psana::Archon::ConfigV1::at)
    .def("dwell1", &Psana::Archon::ConfigV1::dwell1)
    .def("dwell2", &Psana::Archon::ConfigV1::dwell2)
    .def("rgHigh", &Psana::Archon::ConfigV1::rgHigh)
    .def("rgLow", &Psana::Archon::ConfigV1::rgLow)
    .def("sHigh", &Psana::Archon::ConfigV1::sHigh)
    .def("sLow", &Psana::Archon::ConfigV1::sLow)
    .def("aHigh", &Psana::Archon::ConfigV1::aHigh)
    .def("aLow", &Psana::Archon::ConfigV1::aLow)
    .def("rgSlew", &Psana::Archon::ConfigV1::rgSlew)
    .def("sSlew", &Psana::Archon::ConfigV1::sSlew)
    .def("aSlew", &Psana::Archon::ConfigV1::aSlew)
    .def("config", &Psana::Archon::ConfigV1::config,"The path to an acf file to use with the camera.")
  ;

  enum_<Psana::Archon::ConfigV1::ReadoutMode>("ReadoutMode")
    .value("Single",Psana::Archon::ConfigV1::Single)
    .value("Continuous",Psana::Archon::ConfigV1::Continuous)
    .value("Triggered",Psana::Archon::ConfigV1::Triggered)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_ArchonConfig);
  scope().attr("FILENAME_CHAR_MAX")=256;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Archon::ConfigV1> >(Pds::TypeId::Id_ArchonConfig));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }

} // createWrappers()
} // namespace Archon
} // namespace psddl_python
